{
	"info": {
		"_postman_id": "7baa9e6f-8062-488d-86de-7018e5f18d26",
		"name": "Cortex",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "save",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fde68bb6-5794-450f-a397-d3d812222332",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"characterId\", jsonData.characterId);",
							"",
							"pm.test(\"Verify characterId\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.characterId).to.be.a(\"string\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Briv\",\n  \"level\": 5,\n  \"classes\": [\n    {\n    \"name\":\"fighter\",\n    \"hitDiceValue\":10,\n    \"classLevel\":3\n    },\n    {\n      \"name\":\"wizard\",\n      \"hitDiceValue\":6,\n      \"classLevel\":2\n    }\n  ],\n  \"stats\":{\n    \"strength\":15,\n    \"dexterity\":12,\n    \"constitution\":14,\n    \"intelligence\":13,\n    \"wisdom\":10,\n    \"charisma\":8\n  },\n  \"items\":[\n    {\n      \"name\":\"Ioun Stone of Fortitude\",\n      \"modifier\":{\n        \"affectedObject\":\"stats\",\n        \"affectedValue\":\"constitution\",\n        \"value\":2\n      }\n    }\n  ],\n  \"defenses\":[\n    {\n      \"type\":\"fire\",\n      \"defense\":\"immunity\"\n    },\n    {\n      \"type\":\"slashing\",\n      \"defense\":\"resistance\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend}}/v1/save",
					"host": [
						"{{backend}}"
					],
					"path": [
						"v1",
						"save"
					]
				}
			},
			"response": []
		},
		{
			"name": "heal",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "284c3fbf-ab41-44df-bf06-435ef334f323",
						"exec": [
							"pm.test(\"Response fields are valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.currentHitPoints).to.be.a(\"number\");",
							"    pm.expect(jsonData.maximumHitPoints).to.be.a(\"number\");",
							"    pm.expect(jsonData.temporaryHitPoints).to.be.a(\"number\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"characterId\": \"{{characterId}}\",\n\t\"healValue\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend}}/v1/heal",
					"host": [
						"{{backend}}"
					],
					"path": [
						"v1",
						"heal"
					]
				}
			},
			"response": []
		},
		{
			"name": "heal - incomplete request body",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ce9255b7-6ac5-4e7b-9714-9322d1c8ed5d",
						"exec": [
							"pm.test(\"incomplete request body\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"healValue is missing\");",
							"});",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"characterId\": \"{{characterId}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend}}/v1/heal",
					"host": [
						"{{backend}}"
					],
					"path": [
						"v1",
						"heal"
					]
				}
			},
			"response": []
		},
		{
			"name": "heal - invalid characterId",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7c7c973a-09b4-411a-84f8-2264be2f603a",
						"exec": [
							"pm.test(\"Not found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"characterId not found\");",
							"});",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"characterId\": \"does-not-exist\",\n\t\"healValue\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend}}/v1/heal",
					"host": [
						"{{backend}}"
					],
					"path": [
						"v1",
						"heal"
					]
				}
			},
			"response": []
		},
		{
			"name": "damage - with resistance",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9a766376-6caa-4045-927d-5a017656d5f5",
						"exec": [
							"pm.test(\"Response fields are valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.currentHitPoints).to.be.a(\"number\");",
							"    pm.expect(jsonData.maximumHitPoints).to.be.a(\"number\");",
							"    pm.expect(jsonData.temporaryHitPoints).to.be.a(\"number\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"characterId\": \"{{characterId}}\",\n\t\"damageValue\": 20,\n\t\"damageType\": \"slashing\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend}}/v1/damage",
					"host": [
						"{{backend}}"
					],
					"path": [
						"v1",
						"damage"
					]
				}
			},
			"response": []
		},
		{
			"name": "damage - with immunity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "26095ac7-0edd-47b9-952e-710162d5a20f",
						"exec": [
							"pm.test(\"Response fields are valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.currentHitPoints).to.be.a(\"number\");",
							"    pm.expect(jsonData.maximumHitPoints).to.be.a(\"number\");",
							"    pm.expect(jsonData.temporaryHitPoints).to.be.a(\"number\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"characterId\": \"{{characterId}}\",\n\t\"damageValue\": 20,\n\t\"damageType\": \"fire\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend}}/v1/damage",
					"host": [
						"{{backend}}"
					],
					"path": [
						"v1",
						"damage"
					]
				}
			},
			"response": []
		},
		{
			"name": "damage - with full damage",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c3f06880-c3bb-41b2-a337-900d4dcd150f",
						"exec": [
							"pm.test(\"Response fields are valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.currentHitPoints).to.be.a(\"number\");",
							"    pm.expect(jsonData.maximumHitPoints).to.be.a(\"number\");",
							"    pm.expect(jsonData.temporaryHitPoints).to.be.a(\"number\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"characterId\": \"{{characterId}}\",\n\t\"damageValue\": 20,\n\t\"damageType\": \"piercing\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend}}/v1/damage",
					"host": [
						"{{backend}}"
					],
					"path": [
						"v1",
						"damage"
					]
				}
			},
			"response": []
		},
		{
			"name": "temp HP",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de940bd9-facd-413a-9288-aaa1a65f1e42",
						"exec": [
							"pm.test(\"Response fields are valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.currentHitPoints).to.be.a(\"number\");",
							"    pm.expect(jsonData.maximumHitPoints).to.be.a(\"number\");",
							"    pm.expect(jsonData.temporaryHitPoints).to.be.a(\"number\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"characterId\": \"{{characterId}}\",\n\t\"temporaryHitPoints\": 15\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend}}/v1/tempHP",
					"host": [
						"{{backend}}"
					],
					"path": [
						"v1",
						"tempHP"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e2835f28-78ef-4b6e-93a4-d4f7cf404f2d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "76d92ae3-5bbc-467b-940f-da49d1ee076b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "2b3ffd5a-d5e3-4c82-b9ff-270de428c3fc",
			"key": "backend",
			"value": "http://localhost:8080",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}